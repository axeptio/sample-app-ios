// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.10 (swiftlang-5.10.0.13 clang-1500.3.9.4)
// swift-module-flags: -target arm64-apple-ios15.0 -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -enable-bare-slash-regex -module-name AxeptioSDK
import AppTrackingTransparency
import Foundation
import Network
import OSLog
import Swift
import UIKit
import WebKit
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
@objc @_hasMissingDesignatedInitializers final public class Axeptio : ObjectiveC.NSObject {
  @objc public static let shared: AxeptioSDK.Axeptio
  @objc final public let keyAxeptioTokenQueryItem: Swift.String
  @objc final public var axeptioToken: Swift.String? {
    @objc get
  }
  @objc final public func initialize(targetService: AxeptioSDK.AxeptioService, clientId: Swift.String, cookiesVersion: Swift.String)
  @objc final public func initialize(targetService: AxeptioSDK.AxeptioService, clientId: Swift.String, cookiesVersion: Swift.String, token: Swift.String)
  @objc final public func setupUI()
  @objc final public func setUserDeniedTracking()
  @objc final public func appendAxeptioTokenToURL(_ url: Foundation.URL, token: Swift.String) -> Foundation.URL
  @objc final public func showConsentScreen()
  @objc final public func clearConsent()
  @objc final public func setEventListener(_ listener: AxeptioSDK.AxeptioEventListener)
  @objc final public func removeEventListener(_ listener: AxeptioSDK.AxeptioEventListener)
  @objc deinit
}
@_hasMissingDesignatedInitializers @objc public class GoogleConsentV2 : ObjectiveC.NSObject, Swift.Decodable {
  @objc public var analyticsStorage: AxeptioSDK.GoogleConsentStatus
  @objc public var adStorage: AxeptioSDK.GoogleConsentStatus
  @objc public var adUserData: AxeptioSDK.GoogleConsentStatus
  @objc public var adPersonalization: AxeptioSDK.GoogleConsentStatus
  @objc deinit
  required public init(from decoder: any Swift.Decoder) throws
}
@objc public enum AxeptioService : Swift.Int {
  case brands = 1, publisherTcf
  public func getWebViewUrl() -> Swift.String
  public var baseURL: Swift.String {
    get
  }
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@_inheritsConvenienceInitializers @objc public class AxeptioServiceHelper : ObjectiveC.NSObject {
  @objc public static func fromString(_ string: Swift.String) -> AxeptioSDK.AxeptioService
  @objc override dynamic public init()
  @objc deinit
}
@_inheritsConvenienceInitializers @objc final public class AxeptioEventListener : ObjectiveC.NSObject {
  @objc final public var onPopupClosedEvent: (() -> Swift.Void)?
  @objc final public var onConsentChanged: (() -> Swift.Void)?
  @objc final public var onGoogleConsentModeUpdate: ((AxeptioSDK.GoogleConsentV2) -> Swift.Void)?
  @objc override dynamic public init()
  @objc deinit
}
@objc public enum GoogleConsentStatus : Swift.Int, Swift.RawRepresentable, Swift.Decodable {
  public typealias RawValue = Swift.String
  case granted
  case denied
  public var rawValue: AxeptioSDK.GoogleConsentStatus.RawValue {
    get
  }
  public init?(rawValue: AxeptioSDK.GoogleConsentStatus.RawValue)
}
extension AxeptioSDK.AxeptioService : Swift.Equatable {}
extension AxeptioSDK.AxeptioService : Swift.Hashable {}
extension AxeptioSDK.AxeptioService : Swift.RawRepresentable {}
extension AxeptioSDK.GoogleConsentStatus : Swift.Equatable {}
extension AxeptioSDK.GoogleConsentStatus : Swift.Hashable {}
